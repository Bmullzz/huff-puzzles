
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)

#define macro MULTIPLY() = takes(2) returns(1) {
    0x04 calldataload   // [a] - load first parameter
    0x24 calldataload   // [b][a] - load second parameter

    dup2                // [b][a][b] - duplicate 2nd stack item
    dup2
    dup2                // [a][b][a][b] - diplicate 2nd stack item
    mul                 // [answer][a][b] - multiply 2 most recent stack items
    // dup1                // [answer][answer][a][b] - duplicate first stack item
    swap3               // [a][b][answer]
    
    iszero              // [isZero][a][b][answer]
    swap2               // [b][a][isZero][answer]
    swap1               // [a][b][isZero][answer]
    dup4                // [answer][a][b][isZero][answer]
    div eq
    or                 
    success jumpi

    0x00 0x00 revert

    success:
        0x40 mstore
        0x20 0x40 return
}


#define macro MAIN() = takes(0) returns(0) {

    0x00 calldataload 0xE0 shr

    dup1 __FUNC_SIG(multiply) eq multiply jumpi

    0x00 0x00 revert

    multiply:
        MULTIPLY()

}